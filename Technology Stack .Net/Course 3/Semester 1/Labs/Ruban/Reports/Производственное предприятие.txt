Производственное предприятие

Цель работы:
Научиться моделировать взаимоотношения элементов внешней среды и элементов проектируемой программной системы через синтерз прецендентов, их расширенное описание и включение в диаграмму UseCase.

Вариант индивидуального задания:
№8 Телефонная станция для обеспечения связи в офисе

Словестное описание объекта информации и всех выделенных прецендентов:
Телефонная станция - устройство обеспечивающие автоматическое соединение и поддержание телефонной связи между абонентами этой телефонной станции, которые пользуються специальными устройствами связи, такими как: телефон, факс и тд. Система автоматических телефонных станций обеспечивает установление, поддержание и разрыв соединений между аппаратами, а также дополнительные возможности.
Основными задачами телефонной станции являются: распознавание исходящего сигнала от пользователя, запоминание и поиск вызываемого номера, передача сигнала вызываемому абоненту, поддержка и завершение сеанса комутации.

Описание прецендентов:
1)	
Название: Распознавание исходящего сигнала от пользователя.
Предусловие: Пользователю необходимо соединится с другим пользователем.
Действующие лицо: пользователь.
Основной поток: 
С помощью устройства соединения такого как: телефон, факс, пользователь набирает номер другого пользователя
Постусловие: После набора номера, телефонная станция подает сигнал того, что она обрабатывает вызов.

2)
Название: Запоминание и поиск вызываемого номера.
Предусловие: пользователь набрал номер.
Действующие лицо: телефонная станция.
Основной поток: 
Телефонная станция выполняет поиск номера в своей базе данных.
Записывает в нее данные о входящем вызове.
Передает сигнал другому абоненту.
Альтернативный поток: если номера не существует, станция прерывает текущий сеанс.
Альтернативный поток 2 : абонент может отменить вызов.
Постусловие: пользователь должен дождаться отклика от вызываемого абонента.

3)
Название: передача сигнала вызываемому абоненту
Предусловие: вызываемый номер находится в базе данных.
Действующие лицо: телефонная станция
Основной поток:
На вызываемый номер подается сигнал.
Вызываемый абонент отвечает на сигнал
Альтернативный поток: вызываемый абонент отменил вызов.
Постусловие: если вызываемый абонент принял вызов, то телефонная станция инициирует начало разговора.

4)
Название: Поддержка и завершение сеанса комутации.
Предусловие: вызываемый абонент ответил на поступающий сигнал.
Действующие лицо: Телефонная станция
Основной поток: 
Телефонная станция поддерживает связь между абонентами.
При завершении сеанса записывает в базу данных информацию о разговоре и разрывает соединение.
Постусловие: Связи между абонентами больше не существует.


-------------------------------------------------------------------------------------------------------------------


Функції получені у результаті аналізу діаграми прецедентів:

1) Замовлення товару
2) Обробити заявку
3) Визначитися з необхідними ресурсами та обладненням
4) Перевірити чи є місце на складі та чи є товар на складі
5) Купити матеріали
6) Відправити ресурси на склад
7) Підготовити тех. процес товару
8) Виготовити товар
9) Відправити товар на склад
10) Розрахувати кількість грузовиків для доставки
11) Погрузити товар
12) Доставити товар замовнику
13) Підтвердити получення товару

Письмовий опис сущностей системи, получений у результаті аналізу діаграми прецедентів:

1) Material: базовий клас для ресурсів та обладненя, має назву Name, та має ціну Price, та поле IsOneTimeUse яке показує чи одноразовий це матеріал
2) Resource: нащадок класу Material, займає площу на складі Area
3) Tool: нащадок класу Material, має дату придбання BuyDate
4) Product: нащадок класу Material, товар, який виробляє виробництво, має унікальний ідентифікатор Id, та поле яке показує чи виготовлений цей товар IsMade, Area показує скільки місця займе продукт на складі
5) ProductCollection: клас, який містить колекцію продуктів, та має функцію підрахунку вартості товарів TotalPrice()
6) PayBuilder: клас який на основі колекції продуктів ProductCollection приймає оплату замовлення, має функцію Pay() яка приймає оплачену суму, та повертає об'єкт заявки Order
7) Order: клас заявки на купівлю товару, має перелік замовлених товарів ProductCollection, поле яке показує чи оброблена ця заявка IsProcessed та статичну функцію MakeOrder() яка приймає колекцію товарів Product та повертає PayBuilder.
8) OrderProcessor: статичний клас, який має функцію ProcessOrder(), яка приймає заявку Order, та повертає об'єкт MaterialsCollection, та відмічає заявку як оброблену
9) MaterialsCollection: клас, який містить функцію NeededPlace() яка повертає значення необхідної площі, щоб розмістити матеріали на складі, та має поле Dictionary<Product,Material[]> яке асоціює певний продукт з потрібними матеріалами для його виробництва, конструктор приймає об'єкт ProductCollection.
10) IStorage: інтерфейс складу, має функцію Push() яка приймає колекцію матеріалів, або один матеріал, та фунцію Pop(), яка видає матеріал за його назвою, та функцію IsInStorage() яка приймає назву матеріалу, та кількість і повертає bool
11) Storage: реалізує інтерфейс IStorage, також має словник Dictionary<string, Material[]>, та поле Area - сумарна площа складу
12) StorageDecorator: реалізує інтерфейс IStorage, приймає у конструкторі об'єкт IStorage, та у методах Push(), Pop(), IsInStorage() та реалізує додаткову бізнес логіку
13) StorageFactory: статичний клас, який спрощує створення об'єктів IStorage, має метод Create(), який повертає IStorage
14) MaterialChecker: має метод GetNeededMaterials(), який приймає колекцію необхідних матеріалів, та об'єкт IStorage і повертає коллекцію матеріалів яких не хватає на складі 
14) IMaterialBuyer: інтерфейс, який має метод BuyMaterials(), який відповідає за закупівлю матеріалів повертає колекцію закуплених матеріалів.
15) MaterialBuyer: реалізує інтерфейс IMaterialBuyer, має поле MaterialChecker.
16) Guild: класс який відповідає за роботу цеху, має поле IStorage та IProductMaker і функцію MakeGoods(), яка робить товари, заносить їх до складу та повертає колекцію товарів з міткою IsMade=true, та приймає об'єкт MaterialsCollection
17) IProductMaker: інтерфейс який відповідає за виробництво одного конкретного товара, має метод MakeProduct() який приймає продукт, та колекцію матеріалів
18) ProductMaker: реалізує інтерфейс IProductMaker
19) Truck: клас який моделює грузовик що може доставляти продукти, має поле колекції продуктів Products та поле Area скільки площі в нього можна помістити
19) DeliveryService: клас який реалізує патерн сінглтона, функція GetTrucks() яка підраховує кількість необхідних грузовиків, та повертає їх колекцію, та метод LoadTrucks() який заповньює колекцію грузовиків продуктами. Останім методом викликається метод Deliver() який доставляє замовнику колекцію грузовиків для подальшого використання.
20) NotEnoughtSpaceException: клас виключення, який показує що у об'єкта не хватає місця. Нащадок класа Exception
21) UnpackingService: клас, який відповідає за те, щоб розгрузити колекцію продуктів Product[] з грузовиків Truck[].


-------------------------------------------------------------------------------------------------------------------


Основні сущності виробничого підприємства:
Order, MaterialCollection, IStorage, Guild, DeliveryService

Опис станів, переходів і умови переходів

Опис станів для об'єкта Order:

1) Користувач вибрав товари, які хоче замовити у виробника
2) Користувач оплачує замовлення та отримує оплачену заявку
3) Заявка аналізується системою, після чого створюється список матеріалів для виробництва товарів
4) Починається виготовлення продуктів
5) Коли товар доставлено, замовник показує оплачену заявку і товар переходить до його користування

Опис станів для об'єкта MaterialCollection:

1) На основі заявки були обрані матеріали необхідні для кожного продукту
2) Система перевіряє чи достатньо матеріалів на складі
2.1) Якщо матеріалів не достатньо то система робить закупку необхідних матеріалів
2.2) Якщо на складі не хватає місця для нових ресурсів, то виробництво затримується доки не звільниться місце
3) Далі матеріали переходять до цеху на основі яких виробляються товари
4) Деяки матеріали закінчуються, а деякі повертаються на склад

Опис станів для об'єкта IStorage:

1) Підприємсту потрібно виготовити продукт і для доступу до матеріалів воно використовує склад
2) Система перевіряє наявність ресурсів на складі, та вирішує чи потрібно докупувати нові
2.1) Якщо на складі не хватає місця для нових ресурсів, то виробництво затримується доки не звільниться місце
3) Після виробництва товарів, залишок ресурсів повертається на склад

Опис станів для об'єкта Guild:

1) Цеху приходить список товарів які необхідно зробити, та набір матеріалів з яких виробляються кінечні продукти
2) Цех послідовно виготовлює кожний товар, використовуючи видані йому матеріали
3) Повертає залишок матеріалів на склад
4) Передає виготовлені продукти до складу

Опис станів для об'єкта DeliveryService:

1) Приймає продукти, які необхідно доставити замовнику
2) Система підраховує скільки необхідно грузовиків, для того щоб доставити всі товари, а також виділяє їх
3) Грузовики доставляють товар замовнику і перевіряють чи співпадає товар з заявкою, якщо заявка не співпадає, то товар повертається на склад
4) Якщо заявка і товари співпали, то товар переходить до замовника.

Опис взаємодій:

1) Замовник обирає товари, які хоче купити, створюється колекція продуктів
2) На основі цієї колекції створюється заявка, яку замовник оплачує
3) Після оплати, заявка оброблюється і створюється колекція матеріалів, необхідних для виробництва замовлених товарів
4) Система перевіряє чи вистачає матеріалів на складі та закупає їх при необхідності.
5) Цеху надходить колекція продуктів, та матеріали які необхідня для створення одиниці кожного продукту.
6) Цех забирає зі складу матеріали та виготовляє товар
7) Після виробництва, товар їде до складу
8) Служба доставки забирає товари зі складу, підраховує кількість грузовиків для доставки, та доставляє товар замовнику
9) Служба розгрузки дістає товари з грузовиків та віддає замовнику.
